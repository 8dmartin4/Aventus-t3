// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String             @id @default(auto()) @map("_id") @db.ObjectId
  name                       String?
  email                      String?            @unique
  emailVerified              DateTime?
  image                      String?
  role                       String?            @default("USER")
  team                       String?            @default("NONE")
  osrsName                   String?
  accounts                   Account[]
  sessions                   Session[]
  submittedStaffApplications StaffApplication[] @relation("SubmittedStaffApplications")
  approvedStaffApplications  StaffApplication[] @relation("ApprovedStaffApplications")
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BotUsers {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  discordid   String?
  splits      BigInt?
  points      Int?
  recruited   Int?
  recruitedby String?
}

model OSRSNames {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  osrsname  String?
  discordid String?
}

model MainName {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  mainname  String?
  discordid String?
}

model StaffApplication {
  oid                       String   @id @default(auto()) @map("_id") @db.ObjectId
  id                        String   @unique
  status                    String?  @default("Pending Review")
  osrsName                  String
  discordName               String
  staffReference            Boolean
  staffReferenceName        String
  desiredRoles              String[]
  joinedAventusInput        String
  reasonForApplicationInput String
  reasonForGoodFitInput     String
  submittingUser            User     @relation(name: "SubmittedStaffApplications", fields: [submittingUserId], references: [id], onDelete: Cascade)
  submittingUserId          String   @db.ObjectId
  approvingUser             User?    @relation(name: "ApprovedStaffApplications", fields: [approvingUserId], references: [id])
  approvingUserId           String?  @db.ObjectId
}
